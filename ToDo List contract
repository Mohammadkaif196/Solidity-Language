// SPDX-License-Identifier: MIT
pragma solidity 0.8.19;

contract Demo {
    uint public taskCount;

    struct Task {
        uint id;
        string content;
        bool completed;
    }

    mapping(uint => Task) public tasks;

    event TaskCreated(uint id, string content, bool finish);
    event TaskCompleted(uint id, string content, bool finish);

    constructor() {
        taskCount=0;
        createTask("Initial Task");
    }

    function createTask(string memory _content) public {
        taskCount++;
        tasks[taskCount] = Task(taskCount, _content, false);
        emit TaskCreated(taskCount, _content, false);
    }

    function toggleTaskCompleted(uint _id) public {
        require(_id > 0 && _id <= taskCount, "Invalid task ID");
        Task storage task = tasks[_id];
        task.completed = !task.completed;
        emit TaskCompleted(_id, task.content, task.completed);
    }
     function getTask(uint _id) public view returns (uint, string memory, bool) {
        Task memory _task = tasks[_id];
        return (_task.id, _task.content, _task.completed);
    }
    function getTaskCount() public view returns (uint) {
        return taskCount;
    }
    function getAllTasks()public view returns(uint[] memory,string[] memory ,bool[] memory){
        uint[]memory ids=new uint[](taskCount);
        string[]memory contents=new string[](taskCount);
        bool[]memory comp=new bool[](taskCount);

        for(uint i=1;i<taskCount;i++){
            Task storage task=tasks[i];
            ids[i-1]=task.id;
            contents[i-1]=task.content;
            comp[i-1]=task.completed;
        }
        return(ids,contents,comp);
        }
    }

